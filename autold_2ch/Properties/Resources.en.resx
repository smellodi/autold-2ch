<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="BackToHome" xml:space="preserve">
    <value>Back to home page</value>
  </data>
	<data name="CleanAir" xml:space="preserve">
    <value>Clean air</value>
  </data>
	<data name="Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
	<data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
	<data name="CommaSeparatedListWithExpressions" xml:space="preserve">
    <value>A list of space or new-line -separated expressions. Each expression consists of one or two sub-expressions of the form '&lt;channel=1|2&gt;=[&lt;delay=ms&gt;]&lt;flow=ml/min&gt;x&lt;duration=ms&gt;' separated by comma. Example: '1=4x200,2=[100]4x100 2=10x500'</value>
  </data>
	<data name="CommaSeparatedValues" xml:space="preserve">
    <value>space or new-line -separated expressions consists of one or two sub-expressions in the form '&lt;1|2&gt;=[&lt;ms&gt;]&lt;ml/min&gt;x&lt;ms&gt;' separated by comma.</value>
  </data>
	<data name="COMMonitor" xml:space="preserve">
    <value>COM Monitor</value>
  </data>
	<data name="CorrectAndTryAgain" xml:space="preserve">
    <value>Please correct and try again.</value>
  </data>
	<data name="DurationsSec" xml:space="preserve">
    <value>Durations in seconds</value>
  </data>
	<data name="CannotOpenPort" xml:space="preserve">
    <value>Cannot open the port</value>
  </data>
	<data name="Events" xml:space="preserve">
    <value>Events</value>
  </data>
	<data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
	<data name="FinalPause" xml:space="preserve">
    <value>Final pause</value>
  </data>
	<data name="Finished" xml:space="preserve">
    <value>Finished</value>
  </data>
	<data name="NumNotNeg" xml:space="preserve">
    <value>a non-negative number</value>
  </data>
	<data name="NumPos" xml:space="preserve">
    <value>a positive number</value>
  </data>
	<data name="Graph" xml:space="preserve">
    <value>Graph</value>
  </data>
	<data name="InfoF2" xml:space="preserve">
    <value>Press F2 to simulate COM ports.</value>
  </data>
	<data name="InfoF5" xml:space="preserve">
    <value>Press F5 any time to show the logging window.</value>
  </data>
	<data name="InitialPause" xml:space="preserve">
    <value>Initial pause</value>
  </data>
	<data name="Input" xml:space="preserve">
    <value>Input</value>
  </data>
	<data name="Interrupt" xml:space="preserve">
    <value>Interrupt</value>
  </data>
	<data name="IntNotNeg" xml:space="preserve">
    <value>a non-negative integer value</value>
  </data>
	<data name="IntPos" xml:space="preserve">
    <value>a positive integer number</value>
  </data>
	<data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
	<data name="Light" xml:space="preserve">
    <value>Light</value>
  </data>
	<data name="LMin" xml:space="preserve">
    <value>l/min</value>
  </data>
	<data name="MFCPlayground" xml:space="preserve">
    <value>MFC Playground</value>
  </data>
	<data name="MlMin" xml:space="preserve">
    <value>ml/min</value>
  </data>
	<data name="Ms" xml:space="preserve">
    <value>ms</value>
  </data>
	<data name="MV" xml:space="preserve">
    <value>mV</value>
  </data>
	<data name="OdorFlow" xml:space="preserve">
    <value>Test odor flow</value>
  </data>
	<data name="OdorPulses" xml:space="preserve">
    <value>Odor Pulses</value>
  </data>
	<data name="PIDUsage" xml:space="preserve">
    <value>PID usage</value>
  </data>
	<data name="PIDVoltage" xml:space="preserve">
    <value>PID voltage</value>
  </data>
	<data name="PulseFlowRate" xml:space="preserve">
    <value>Pulse flow rates:</value>
  </data>
	<data name="Pulses" xml:space="preserve">
    <value>Pulses</value>
  </data>
	<data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
	<data name="SaveData" xml:space="preserve">
    <value>Save data</value>
  </data>
	<data name="ScentedAir" xml:space="preserve">
    <value>Scented air</value>
  </data>
	<data name="Seconds" xml:space="preserve">
    <value>seconds</value>
  </data>
	<data name="SerialPorts" xml:space="preserve">
    <value>Devices</value>
  </data>
	<data name="Set" xml:space="preserve">
    <value>Set</value>
  </data>
	<data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
	<data name="Setup" xml:space="preserve">
    <value>Setup</value>
  </data>
	<data name="ShowAs" xml:space="preserve">
    <value>Show as</value>
  </data>
	<data name="Start" xml:space="preserve">
    <value>Start</value>
  </data>
	<data name="Table" xml:space="preserve">
    <value>Table</value>
  </data>
	<data name="Temp" xml:space="preserve">
    <value>Temp (C)</value>
  </data>
	<data name="Text" xml:space="preserve">
    <value>Text</value>
  </data>
	<data name="ThankYou" xml:space="preserve">
    <value>Thank you!</value>
  </data>
	<data name="Time" xml:space="preserve">
    <value>Time</value>
  </data>
	<data name="User" xml:space="preserve">
    <value>open</value>
  </data>
	<data name="NoDataToSave" xml:space="preserve">
    <value>There is no data to save</value>
  </data>
	<data name="Waste" xml:space="preserve">
    <value>closed</value>
  </data>
	<data name="AppTerminated" xml:space="preserve">
    <value>The application is terminated.</value>
  </data>
	<data name="DataSavedInto" xml:space="preserve">
    <value>Data saved into</value>
  </data>
	<data name="DeviceConnLost" xml:space="preserve">
    <value>Connection with the {0} device was shut down.</value>
  </data>
	<data name="EmptyList" xml:space="preserve">
    <value>The list of pulses is empty</value>
  </data>
	<data name="FailedToSave" xml:space="preserve">
    <value>Failed to save data into</value>
  </data>
	<data name="PressNoToChangeNameFolder" xml:space="preserve">
    <value>Press 'No' to change the name and/or folder.</value>
  </data>
	<data name="Retry" xml:space="preserve">
    <value>Retry?</value>
  </data>
	<data name="SaveDataInto" xml:space="preserve">
    <value>Would you like to save data into</value>
  </data>
	<data name="ValueFormatNotValid" xml:space="preserve">
    <value>The type of value '{0}' is invalid, it must be a '{1}' number</value>
  </data>
	<data name="ValueTooLarge" xml:space="preserve">
    <value>The value '{0}' is too large, is must be no greater than '{1}'</value>
  </data>
	<data name="ValueTooSmall" xml:space="preserve">
    <value>The value '{0}' is too small, is must be no smaller than '{1}'</value>
  </data>
	<data name="Logger" xml:space="preserve">
    <value>Logger</value>
  </data>
	<data name="Validator" xml:space="preserve">
    <value>Validator</value>
  </data>
	<data name="Temperature" xml:space="preserve">
    <value>Temperature</value>
  </data>
	<data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
	<data name="No" xml:space="preserve">
    <value>No</value>
  </data>
	<data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
	<data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
	<data name="Discard" xml:space="preserve">
    <value>Discard</value>
  </data>
	<data name="SaveAs" xml:space="preserve">
    <value>Save as...</value>
  </data>
	<data name="Abort" xml:space="preserve">
    <value>Abort</value>
  </data>
	<data name="Ignore" xml:space="preserve">
    <value>Ignore</value>
  </data>
	<data name="PressDiscard" xml:space="preserve">
    <value>Press 'Discard' to discard the data.</value>
  </data>
	<data name="PressCancel" xml:space="preserve">
    <value>Press 'Cancel' to continue without saving</value>
  </data>
	<data name="Timer" xml:space="preserve">
		<value>Timer</value>
	</data>
	<data name="UseValveControllerTimer" xml:space="preserve">
		<value>Use the valve controller timer whenever it is possible</value>
	</data>
	<data name="Back" xml:space="preserve">
		<value>Back</value>
	</data>
	<data name="Open" xml:space="preserve">
		<value>Open</value>
	</data>
	<data name="PulseInvalidNumberOfChannels" xml:space="preserve">
		<value>Invalid number of channels: {0}</value>
	</data>
	<data name="PulseInvalidChannelExpression" xml:space="preserve">
		<value>Invalid channel expression: {0}</value>
	</data>
	<data name="PulseInvalidChannelID" xml:space="preserve">
		<value>Invalid channel ID: {0}</value>
	</data>
	<data name="PulseInvalidChannelDescription" xml:space="preserve">
		<value>Invalid channel #{0} description: {1}</value>
	</data>
	<data name="PulseSameChannelTwice" xml:space="preserve">
		<value>Same channel defined twice: {0}</value>
	</data>
	<data name="PulseOnlyOneChannelCanDelay" xml:space="preserve">
		<value>Only one channel can delay: {0}</value>
	</data>
	<data name="Channel" xml:space="preserve">
		<value>Channel</value>
	</data>
	<data name="Session" xml:space="preserve">
		<value>Odor flow</value>
	</data>
	<data name="ManualControl" xml:space="preserve">
		<value>Manual control</value>
	</data>
	<data name="ManualFlowStop" xml:space="preserve">
		<value>stop flow</value>
	</data>
	<data name="ManualFlowStopTip" xml:space="preserve">
		<value>If checked, a message appears after the flow time is over, but the valves are not closed yet. The procedure continues after a user closes the message.</value>
	</data>
	<data name="ManualFlowStopMsg" xml:space="preserve">
		<value>Close this message to continue.</value>
	</data>
	<data name="Continue" xml:space="preserve">
		<value>Continue</value>
	</data>
	<data name="Comparison" xml:space="preserve">
		<value>Comparison</value>
	</data>
	<data name="InstructionToEnterMixtures" xml:space="preserve">
		<value>Each line contains a pair of "Odor1", "Odor2" or "MixNN" (NN = 1..99) separated by comma</value>
	</data>
	<data name="PairsOfMixtures" xml:space="preserve">
		<value>Pairs of mixtures</value>
	</data>
	<data name="InstructionWait" xml:space="preserve">
		<value>Please wait...</value>
	</data>
	<data name="WasSameOrNot" xml:space="preserve">
		<value>The odors were...</value>
	</data>
	<data name="Same" xml:space="preserve">
		<value>same</value>
	</data>
	<data name="Different" xml:space="preserve">
		<value>different</value>
	</data>
	<data name="PulseDuration" xml:space="preserve">
		<value>Pulse duration</value>
	</data>
	<data name="WaitForPID" xml:space="preserve">
		<value>Wait until PID reaches a high level</value>
	</data>
	<data name="Odor1" xml:space="preserve">
		<value>Odor #1</value>
	</data>
	<data name="Odor2" xml:space="preserve">
		<value>Odor #2</value>
	</data>
	<data name="VnA_Title" xml:space="preserve">
		<value>Valence and Arousal</value>
	</data>
	<data name="VnA_Instruction" xml:space="preserve">
		<value>Please, fill in the questionnaire</value>
	</data>
	<data name="VnA_Valence" xml:space="preserve">
		<value>Valence</value>
	</data>
	<data name="VnA_ValenceDescription" xml:space="preserve">
		<value>the level of pleasantness</value>
	</data>
	<data name="VnA_Arousal" xml:space="preserve">
		<value>Arousal</value>
	</data>
	<data name="VnA_ArousalDescription" xml:space="preserve">
		<value>the level of autonomic activation</value>
	</data>
	<data name="PracticeOdorFlow" xml:space="preserve">
		<value>Practice odor flow</value>
	</data>
	<data name="Pause" xml:space="preserve">
		<value>Pause</value>
	</data>
	<data name="PauseInfo" xml:space="preserve">
		<value>Take a deep breath...</value>
	</data>
	<data name="VnA_Unpleasant" xml:space="preserve">
		<value>unpleasant</value>
	</data>
	<data name="VnA_Pleasant" xml:space="preserve">
		<value>pleasant</value>
	</data>
	<data name="VnA_Calm" xml:space="preserve">
		<value>calm</value>
	</data>
	<data name="VnA_Excited" xml:space="preserve">
		<value>excited</value>
	</data>
	<data name="PracticeStageFlowDescription" xml:space="preserve">
		<value>This flow will be used to release each gas independently. The following pairs will be used in the practicing stage: IPA-IPA. nButanol-nButanol, IPA-nButanol</value>
	</data>
	<data name="TestStageFlowDescription" xml:space="preserve">
		<value>This flow will be shared between the gases</value>
	</data>
	<data name="GasSniffer" xml:space="preserve">
		<value>Smeller</value>
	</data>
	<data name="GasPresentation" xml:space="preserve">
		<value>Gas presenter for DMS</value>
	</data>
	<data name="PIDSampling" xml:space="preserve">
		<value>PID sampling</value>
	</data>
</root>